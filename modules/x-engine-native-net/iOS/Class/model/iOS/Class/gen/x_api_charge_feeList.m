
// DO NOT MODIFY!.
// generated by x-cli, it will be overwrite eventually!


#import "x_api_charge_feeList.h"


@implementation netdto_charge_feeListReq
    + (BOOL)propertyIsOptional:(NSString *)propertyName {
      if ([propertyName isEqualToString:@"feeName"]) { return YES; }
   if ([propertyName isEqualToString:@"storeName"]) { return YES; }
      return NO;
    }
    
@end

  
@implementation netdto_charge_feeListRes
    + (BOOL)propertyIsOptional:(NSString *)propertyName {
      if ([propertyName isEqualToString:@"current"]) { return YES; }
   if ([propertyName isEqualToString:@"message"]) { return YES; }
   if ([propertyName isEqualToString:@"records"]) { return YES; }
   if ([propertyName isEqualToString:@"status"]) { return YES; }
   if ([propertyName isEqualToString:@"success"]) { return YES; }
   if ([propertyName isEqualToString:@"total"]) { return YES; }
      return NO;
    }
    
@end

  
@implementation netdto_charge_feeListRes_records
    + (BOOL)propertyIsOptional:(NSString *)propertyName {
      if ([propertyName isEqualToString:@"attachmentsRequired"]) { return YES; }
   if ([propertyName isEqualToString:@"billCycle"]) { return YES; }
   if ([propertyName isEqualToString:@"companyId"]) { return YES; }
   if ([propertyName isEqualToString:@"companyName"]) { return YES; }
   if ([propertyName isEqualToString:@"createPerson"]) { return YES; }
   if ([propertyName isEqualToString:@"createTime"]) { return YES; }
   if ([propertyName isEqualToString:@"description"]) { return YES; }
   if ([propertyName isEqualToString:@"endTime"]) { return YES; }
   if ([propertyName isEqualToString:@"feeCode"]) { return YES; }
   if ([propertyName isEqualToString:@"feeName"]) { return YES; }
   if ([propertyName isEqualToString:@"feeScaleCount"]) { return YES; }
   if ([propertyName isEqualToString:@"feeScaleList"]) { return YES; }
   if ([propertyName isEqualToString:@"feeScaleNecessary"]) { return YES; }
   if ([propertyName isEqualToString:@"generateBill"]) { return YES; }
   if ([propertyName isEqualToString:@"id"]) { return YES; }
   if ([propertyName isEqualToString:@"ifDelete"]) { return YES; }
   if ([propertyName isEqualToString:@"invoiceNecessary"]) { return YES; }
   if ([propertyName isEqualToString:@"scaleUsedCount"]) { return YES; }
   if ([propertyName isEqualToString:@"storeId"]) { return YES; }
   if ([propertyName isEqualToString:@"storeName"]) { return YES; }
   if ([propertyName isEqualToString:@"taxCode"]) { return YES; }
   if ([propertyName isEqualToString:@"taxRate"]) { return YES; }
   if ([propertyName isEqualToString:@"updatePerson"]) { return YES; }
   if ([propertyName isEqualToString:@"updateTime"]) { return YES; }
   if ([propertyName isEqualToString:@"userId"]) { return YES; }
      return NO;
    }
    
@end

  
@implementation netdto_charge_feeListRes_records_feeScaleList
    + (BOOL)propertyIsOptional:(NSString *)propertyName {
      if ([propertyName isEqualToString:@"billCount"]) { return YES; }
   if ([propertyName isEqualToString:@"billCycle"]) { return YES; }
   if ([propertyName isEqualToString:@"chargeCycle"]) { return YES; }
   if ([propertyName isEqualToString:@"chargeCycleType"]) { return YES; }
   if ([propertyName isEqualToString:@"chargeStartMonth"]) { return YES; }
   if ([propertyName isEqualToString:@"chargeType"]) { return YES; }
   if ([propertyName isEqualToString:@"chargeUnit"]) { return YES; }
   if ([propertyName isEqualToString:@"chargeUnitPrice"]) { return YES; }
   if ([propertyName isEqualToString:@"chargeUnitProportion"]) { return YES; }
   if ([propertyName isEqualToString:@"chargingCycle"]) { return YES; }
   if ([propertyName isEqualToString:@"createPerson"]) { return YES; }
   if ([propertyName isEqualToString:@"createTime"]) { return YES; }
   if ([propertyName isEqualToString:@"decimalMode"]) { return YES; }
   if ([propertyName isEqualToString:@"decimalPlace"]) { return YES; }
   if ([propertyName isEqualToString:@"description"]) { return YES; }
   if ([propertyName isEqualToString:@"endTime"]) { return YES; }
   if ([propertyName isEqualToString:@"feeCode"]) { return YES; }
   if ([propertyName isEqualToString:@"feeId"]) { return YES; }
   if ([propertyName isEqualToString:@"feeName"]) { return YES; }
   if ([propertyName isEqualToString:@"id"]) { return YES; }
   if ([propertyName isEqualToString:@"ifDelete"]) { return YES; }
   if ([propertyName isEqualToString:@"scaleId"]) { return YES; }
   if ([propertyName isEqualToString:@"scaleName"]) { return YES; }
   if ([propertyName isEqualToString:@"shareType"]) { return YES; }
   if ([propertyName isEqualToString:@"shopUsedCount"]) { return YES; }
   if ([propertyName isEqualToString:@"sourceApp"]) { return YES; }
   if ([propertyName isEqualToString:@"storeId"]) { return YES; }
   if ([propertyName isEqualToString:@"storeName"]) { return YES; }
   if ([propertyName isEqualToString:@"unitPriceType"]) { return YES; }
   if ([propertyName isEqualToString:@"updatePerson"]) { return YES; }
   if ([propertyName isEqualToString:@"updateTime"]) { return YES; }
   if ([propertyName isEqualToString:@"userId"]) { return YES; }
      return NO;
    }
    
@end


@implementation gen_charge_feeListApi


- (NSString*) getMethod{
    return @"GET";
}


- (NSString*) getUrl{
  #ifdef RELEASE
    NSAssert(__globalUrlPrefix, @"未设置 __globalUrlPrefix");
  #endif
    if(__globalUrlPrefix)
    {
      return [NSString stringWithFormat:@"%@%@",__globalUrlPrefix,@"/charge/feeList"];
    }else{
    #ifdef DEBUG
      return [NSString stringWithFormat:@"%@%@",@"",@"/charge/feeList"];
    #endif 
    }
}

- (void) request:(charge_feeListApiResponse) response{
    self.network = [NSMutableURLRequest new];
    self.network.URL =[NSURL URLWithString:[self getUrl]];
    self.network.HTTPMethod = [self getMethod];
    self.network.HTTPBody = self.dtoReq.toJSONData;
    [self addFiltersWithNetwork:self.network];
    [self.network send:^(id  _Nullable data, NSURLResponse * _Nullable res, NSError * _Nullable error) {
        NSError* err;
        id resPost = [[netdto_charge_feeListRes alloc] initWithDictionary:data error:&err];
        response(resPost,res,[self errorWrapper:error underlyingError:err]);
    }];
}

- (FBLPromise<netdto_charge_feeListRes *>*) promise:(netdto_charge_feeListReq*) dtoReq{
    FBLPromise<netdto_charge_feeListRes *>* promise = [FBLPromise async:^(FBLPromiseFulfillBlock fulfill, FBLPromiseRejectBlock reject) {
        self.network = [NSMutableURLRequest new];
        self.network.URL =[NSURL URLWithString:[self getUrl]];
        self.network.HTTPMethod = [self getMethod];
        self.network.HTTPBody = dtoReq.toJSONData;
        [self addFiltersWithNetwork:self.network];
        [self.network send:^(id  _Nullable data, NSURLResponse * _Nullable res, NSError * _Nullable error) {
            if(!error){
                NSError* err;
                id resPost = [[netdto_charge_feeListRes alloc] initWithDictionary:data error:&err];
                if(!err)
                 fulfill(resPost);
                else
                    reject(err);
            }else{
                reject(error);
            }
        }];
    }];
    return promise;
}

- (FBLPromise<netdto_charge_feeListRes *>*) promise{
    return [self promise:self.dtoReq];
}

@end


