
// DO NOT MODIFY!.
// generated by x-cli, it will be overwrite eventually!


#import "x_api_gm_general_appVersion_checkUpdate.h"


@implementation x_api_gm_general_appVersion_checkUpdate_Req
    + (BOOL)propertyIsOptional:(NSString *)propertyName {
      if ([propertyName isEqualToString:@"os"]) { return YES; }
   if ([propertyName isEqualToString:@"platform"]) { return YES; }
   if ([propertyName isEqualToString:@"versionCode"]) { return YES; }
   if ([propertyName isEqualToString:@"versionName"]) { return YES; }
      return NO;
    }
    
@end

  
@implementation x_api_gm_general_appVersion_checkUpdate_Res
    + (BOOL)propertyIsOptional:(NSString *)propertyName {
      if ([propertyName isEqualToString:@"digest"]) { return YES; }
   if ([propertyName isEqualToString:@"externalUrl"]) { return YES; }
   if ([propertyName isEqualToString:@"isUpdate"]) { return YES; }
   if ([propertyName isEqualToString:@"remark"]) { return YES; }
   if ([propertyName isEqualToString:@"resUrl"]) { return YES; }
   if ([propertyName isEqualToString:@"title"]) { return YES; }
   if ([propertyName isEqualToString:@"type"]) { return YES; }
      return NO;
    }
    
@end


@implementation x_api_gm_general_appVersion_checkUpdate


- (NSString*) getMethod{
    return @"POST";
}


- (NSString*) getUrl{
  #ifdef RELEASE
    NSAssert(__globalSchemaHost, @"未设置 __globalSchemaHost");
  #endif
    if(__globalSchemaHost)
    {
      return [NSString stringWithFormat:@"%@%@",__globalSchemaHost,@"/gm/general/appVersion/checkUpdate"];
    }else{
    #ifdef DEBUG
      return [NSString stringWithFormat:@"%@%@",@"",@"/gm/general/appVersion/checkUpdate"];
    #endif 
    }
}

- (void) request:(x_api_gm_general_appVersion_checkUpdateApiResponse) response{
    self.network = [NSMutableURLRequest new];
    self.network.URL =[NSURL URLWithString:[self getUrl]];
    self.network.HTTPMethod = [self getMethod];
    self.network.HTTPBody = self.dtoReq.toJSONData;
    [self addFiltersWithNetwork:self.network];
    [self.network send:^(id  _Nullable data, NSURLResponse * _Nullable res, NSError * _Nullable error) {
        NSError* err;
        id resPost = [[x_api_gm_general_appVersion_checkUpdate_Res alloc] initWithDictionary:data error:&err];
        response(resPost,res,[self errorWrapper:error underlyingError:err]);
    }];
}

- (FBLPromise<x_api_gm_general_appVersion_checkUpdate_Res *>*) promise:(x_api_gm_general_appVersion_checkUpdate_Req*) dtoReq{
    FBLPromise<x_api_gm_general_appVersion_checkUpdate_Res *>* promise = [FBLPromise async:^(FBLPromiseFulfillBlock fulfill, FBLPromiseRejectBlock reject) {
        self.network = [NSMutableURLRequest new];
        self.network.URL =[NSURL URLWithString:[self getUrl]];
        self.network.HTTPMethod = [self getMethod];
        self.network.HTTPBody = dtoReq.toJSONData;
        [self addFiltersWithNetwork:self.network];
        [self.network send:^(id  _Nullable data, NSURLResponse * _Nullable res, NSError * _Nullable error) {
            if(!error){
                NSError* err;
                id resPost = [[x_api_gm_general_appVersion_checkUpdate_Res alloc] initWithDictionary:data error:&err];
                if(!err)
                 fulfill(resPost);
                else
                    reject(err);
            }else{
                reject(error);
            }
        }];
    }];
    return promise;
}

- (FBLPromise<x_api_gm_general_appVersion_checkUpdate_Res *>*) promise{
    return [self promise:self.dtoReq];
}

@end


