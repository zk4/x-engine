require_relative '../node_modules/react-native/scripts/react_native_pods.rb'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'
platform :ios, '11.0'
 
source 'https://github.com/CocoaPods/Specs.git'

# 在环境变量里指向 x-engine 本地路径
# export X_ENGINE_MODULES=/Users/zk/git/company/working/x-engine/modules

X_ENGINE_MODULES=ENV['X_ENGINE_MODULES'] || '../..'

def shared_pods
  
  #  config = use_native_modules!
  #  use_react_native!(:path => config["reactNativePath"])

   config = use_native_modules!

      use_react_native!(
        :path => config[:reactNativePath],
        # to enable hermes on iOS, change `false` to `true` and then install pods
        :hermes_enabled => false
      )
      
      inherit! :complete
      
      use_flipper!()
      
  #    post_install do |installer|
  #      react_native_post_install(installer)
  #      __apply_Xcode_12_5_M1_post_install_workaround(installer)
  #    end
  
  pod 'x-engine-native-core', :path => X_ENGINE_MODULES+'/x-engine-native-core'
  pod 'x-engine-native-protocols', :path => X_ENGINE_MODULES+'/x-engine-native-protocols'
  pod 'x-engine-native-dev', :path => X_ENGINE_MODULES+'/x-engine-native-dev'
end
  target 'sit' do
    shared_pods
    pod 'x-engine-native-ui', :path => X_ENGINE_MODULES+'/x-engine-native-ui'
    #use_frameworks!
  end
  target 'uat' do
    shared_pods
    #use_frameworks!
  end
  target 'react_native' do
    shared_pods
    #use_frameworks!
  end

  target 'react_nativeTests' do
    shared_pods
    #use_frameworks!
  end

  target 'react_nativeUITests' do
    shared_pods
    # Pods for testing
    #shared_pods

  end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      if config.name == 'Debug'
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] = '$(inherited) DEBUG=1'
      end
      if config.name == 'Release'
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] = '$(inherited) RELEASE=1'
      end

    end
  end
end
